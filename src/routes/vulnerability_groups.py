from uuid import UUID, uuid1
from typing import List

from fastapi import APIRouter, Depends
from starlette.status import (
    HTTP_200_OK,
    HTTP_201_CREATED,
    HTTP_400_BAD_REQUEST,
    HTTP_404_NOT_FOUND
)

from src.interfaces import (
    VulnerabilityGroupInterface,
    DistributionInterface,
    ConfigurationInterface
)
from src.models import (
    VulnerabilityGroup,
    NewVulnerabilityGroup
)
from src.utils.messages import (
    VulnerabilityGroupsMessages,
    ConfigurationMessage
)
from src.use_case import SecurityUseCase
from src.utils.encoder import BsonObject
from src.utils.response import UJSONResponse


vulnerability_group_routes = APIRouter(tags=["VulnerabilityGroups"])


@vulnerability_group_routes.get("/vulnerability_groups/{uuid}")
def find_by_configuration(
        uuid: UUID,
        user=Depends(SecurityUseCase.validate)
):
    """
    Find all vulnerability groups by configuration in db

    :param uuid: Configuration identifier
    :param user: User authenticated by token.
    """
    try:
        configuration_found = ConfigurationInterface.find_by_identifier(
            uuid,
            user
        )
        if not configuration_found:
            return UJSONResponse(
                ConfigurationMessage.not_found,
                HTTP_404_NOT_FOUND
            )

        vulnerability_groups = VulnerabilityGroupInterface.find_by_configuration(
            configuration_found
        )

        if not vulnerability_groups:
            return UJSONResponse(
                VulnerabilityGroupsMessages.not_found,
                HTTP_404_NOT_FOUND
            )
    except Exception as error:
        return UJSONResponse(
            str(error),
            HTTP_400_BAD_REQUEST
        )

    return UJSONResponse(
        VulnerabilityGroupsMessages.found,
        HTTP_200_OK,
        BsonObject.dict(vulnerability_groups)
    )


@vulnerability_group_routes.post("/vulnerability_groups/{uuid}")
def create_vulnerability_group(
        uuid: UUID,
        vulnerability_groups: List[NewVulnerabilityGroup],
        user=Depends(SecurityUseCase.validate)
):
    """
    Create vulnerability groups by configuration

    :param uuid: Configuration identifier
    :param vulnerability_groups: Vulnerability groups list to insert
    :param user: User authenticated by token.
    """
    try:
        if not vulnerability_groups:
            return UJSONResponse(
                VulnerabilityGroupsMessages.not_vulnerability_entered,
                HTTP_400_BAD_REQUEST
            )

        configuration_found = ConfigurationInterface.find_by_identifier(
            uuid,
            user
        )
        if not configuration_found:
            return UJSONResponse(
                ConfigurationMessage.not_found,
                HTTP_404_NOT_FOUND
            )

        vulnerability_groups_found = VulnerabilityGroupInterface.find_by_configuration(
            configuration_found
        )

        if vulnerability_groups:
            for vulnerability_group in vulnerability_groups_found:
                vulnerability_group.delete()

        for vulnerability_group in vulnerability_groups:
            new_vulnerability_group = VulnerabilityGroup(
                **vulnerability_group,
                configuration=configuration_found
            )
            new_vulnerability_group.save().reload()

    except Exception as error:
        return UJSONResponse(
            str(error),
            HTTP_400_BAD_REQUEST
        )

    return UJSONResponse(
        VulnerabilityGroupsMessages.created,
        HTTP_201_CREATED
    )
