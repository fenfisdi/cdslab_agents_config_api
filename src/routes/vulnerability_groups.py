from typing import List
from uuid import UUID, uuid1

from fastapi import APIRouter, Depends
from starlette.status import (
    HTTP_200_OK,
    HTTP_201_CREATED,
    HTTP_400_BAD_REQUEST,
    HTTP_404_NOT_FOUND
)

from src.interfaces import ConfigurationInterface, VulnerabilityGroupInterface
from src.models.db import VulnerabilityGroup
from src.models.route_models import NewVulnerabilityGroup
from src.use_case import SecurityUseCase
from src.utils.encoder import BsonObject
from src.utils.messages import (
    ConfigurationMessage,
    VulnerabilityGroupMessage
)
from src.utils.response import UJSONResponse

vulnerability_group_routes = APIRouter(
    prefix="/configuration/{conf_uuid}",
    tags=["Vulnerability Groups"]
)


@vulnerability_group_routes.get("/vulnerability_groups")
def list_vulnerability_groups(
    conf_uuid: UUID,
    user = Depends(SecurityUseCase.validate)
):
    """
    List all vulnerability groups by configuration.

    \f
    :param conf_uuid: Configuration identifier.
    :param user: User authenticated.
    """
    try:
        configuration_found = ConfigurationInterface.find_one_by_id(
            conf_uuid,
            user
        )
        if not configuration_found:
            return UJSONResponse(
                ConfigurationMessage.not_found,
                HTTP_404_NOT_FOUND
            )

        vulnerability_groups = VulnerabilityGroupInterface.find_all_by_conf(
            configuration_found
        )

        return UJSONResponse(
            VulnerabilityGroupMessage.found,
            HTTP_200_OK,
            BsonObject.dict(vulnerability_groups)
        )

    except Exception as error:
        return UJSONResponse(
            str(error),
            HTTP_400_BAD_REQUEST
        )


@vulnerability_group_routes.post("/vulnerability_groups")
def create_vulnerability_groups(
    conf_uuid: UUID,
    vulnerability_groups: List[NewVulnerabilityGroup],
    user = Depends(SecurityUseCase.validate)
):
    """
    Create vulnerability groups by configuration

    \f
    :param conf_uuid: Configuration identifier
    :param vulnerability_groups: Vulnerability groups list to insert
    :param user: User authenticated by token.
    """
    try:
        if not vulnerability_groups:
            return UJSONResponse(
                VulnerabilityGroupMessage.not_entered,
                HTTP_400_BAD_REQUEST
            )

        configuration = ConfigurationInterface.find_one_by_id(
            conf_uuid,
            user
        )
        if not configuration:
            return UJSONResponse(
                ConfigurationMessage.not_found,
                HTTP_404_NOT_FOUND
            )

        vg_found = VulnerabilityGroupInterface.find_all_by_conf(
            configuration
        )
        [vg.delete() for vg in vg_found]

        new_vg_list = []
        for vulnerability_group in vulnerability_groups:
            new_vg = VulnerabilityGroup(
                **vulnerability_group.dict(),
                identifier=uuid1(),
                configuration=configuration
            )
            new_vg.save().reload()
            new_vg_list.append(new_vg)

        return UJSONResponse(
            VulnerabilityGroupMessage.created,
            HTTP_201_CREATED,
            BsonObject.dict(new_vg_list)
        )

    except Exception as error:
        return UJSONResponse(
            str(error),
            HTTP_400_BAD_REQUEST
        )


@vulnerability_group_routes.post("/vulnerability_group")
def create_vulnerability_group(
    conf_uuid: UUID,
    vulnerability_group: NewVulnerabilityGroup,
    user = Depends(SecurityUseCase.validate)
):
    """
    Create a vulnerability group by configuration

    \f
    :param conf_uuid: Configuration identifier
    :param vulnerability_group: Vulnerability group to created
    :param user: User authenticated by token.
    """
    try:
        configuration = ConfigurationInterface.find_one_by_id(
            conf_uuid,
            user
        )
        if not configuration:
            return UJSONResponse(
                ConfigurationMessage.not_found,
                HTTP_404_NOT_FOUND
            )

        new_vg = VulnerabilityGroup(
            **vulnerability_group.dict(),
            identifier=uuid1(),
            configuration=configuration
        )
        new_vg.save()

        return UJSONResponse(
            VulnerabilityGroupMessage.created,
            HTTP_201_CREATED,
            BsonObject.dict(new_vg)
        )

    except Exception as error:
        return UJSONResponse(
            str(error),
            HTTP_400_BAD_REQUEST
        )


@vulnerability_group_routes.put("/vulnerability_group/{uuid}")
def update_vulnerability_group(
    conf_uuid: UUID,
    uuid: UUID,
    vulnerability_group: NewVulnerabilityGroup,
    user = Depends(SecurityUseCase.validate)

):
    """
    Update a vulnerability group

    \f
    :param conf_uuid: Configuration identifier
    :param uuid: vulnerability group identifier
    :param vulnerability_group: Vulnerability group to update
    :param user: User authenticated by token.
    """
    try:
        configuration_found = ConfigurationInterface.find_one_by_id(
            conf_uuid,
            user
        )

        if not configuration_found:
            return UJSONResponse(
                ConfigurationMessage.not_found,
                HTTP_404_NOT_FOUND
            )

        vg_found = VulnerabilityGroupInterface.find_one_by_id(
            uuid
        )

        if not vg_found:
            return UJSONResponse(
                VulnerabilityGroupMessage.not_found,
                HTTP_404_NOT_FOUND
            )

        vg_found.update(**vulnerability_group.dict())
        vg_found.reload()

        return UJSONResponse(
            VulnerabilityGroupMessage.updated,
            HTTP_201_CREATED,
            BsonObject.dict(vg_found)
        )

    except Exception as error:
        return UJSONResponse(
            str(error),
            HTTP_400_BAD_REQUEST
        )


@vulnerability_group_routes.delete("/vulnerability_group/{uuid}")
def delete_vulnerability_group(
    conf_uuid: UUID,
    uuid: UUID,
    user = Depends(SecurityUseCase.validate)
):
    """
    Delete a vulnerability group

    \f
    :param conf_uuid: Configuration identifier
    :param uuid: vulnerability group identifier
    :param user: User authenticated by token.
    """
    try:
        configuration_found = ConfigurationInterface.find_one_by_id(
            conf_uuid,
            user
        )

        if not configuration_found:
            return UJSONResponse(
                ConfigurationMessage.not_found,
                HTTP_404_NOT_FOUND
            )

        vg_found = VulnerabilityGroupInterface.find_one_by_id(
            uuid
        )

        if not vg_found:
            return UJSONResponse(
                VulnerabilityGroupMessage.not_found,
                HTTP_404_NOT_FOUND
            )

        vg_found.delete()
        return UJSONResponse(
            VulnerabilityGroupMessage.deleted,
            HTTP_200_OK
        )

    except Exception as error:
        return UJSONResponse(
            str(error),
            HTTP_400_BAD_REQUEST
        )
