from typing import List
from uuid import UUID, uuid1

from fastapi import APIRouter, Depends
from starlette.status import (
    HTTP_200_OK,
    HTTP_201_CREATED,
    HTTP_400_BAD_REQUEST,
    HTTP_404_NOT_FOUND
)

from src.interfaces import ConfigurationInterface, VulnerabilityGroupInterface
from src.models.db import VulnerabilityGroup
from src.models.route_models import NewVulnerabilityGroup
from src.use_case import SecurityUseCase
from src.utils.encoder import BsonObject
from src.utils.messages import (
    ConfigurationMessage,
    VulnerabilityGroupMessage
)
from src.utils.response import UJSONResponse

vulnerability_group_routes = APIRouter(tags=["Vulnerability Groups"])


@vulnerability_group_routes.get(
    "/configuration/{conf_uuid}/vulnerability_groups"
)
def list_vulnerability_groups(
    conf_uuid: UUID,
    user = Depends(SecurityUseCase.validate)
):
    """
    Find all vulnerability groups by configuration in db

    :param conf_uuid: Configuration identifier
    :param user: User authenticated by token.
    """
    try:
        configuration_found = ConfigurationInterface.find_by_identifier(
            conf_uuid,
            user
        )
        if not configuration_found:
            return UJSONResponse(
                ConfigurationMessage.not_found,
                HTTP_404_NOT_FOUND
            )

        vulnerability_groups = VulnerabilityGroupInterface.find_by_configuration(
            configuration_found
        )

        if not vulnerability_groups:
            return UJSONResponse(
                VulnerabilityGroupMessage.not_found,
                HTTP_404_NOT_FOUND
            )
    except Exception as error:
        return UJSONResponse(
            str(error),
            HTTP_400_BAD_REQUEST
        )

    return UJSONResponse(
        VulnerabilityGroupMessage.found,
        HTTP_200_OK,
        BsonObject.dict(vulnerability_groups)
    )


@vulnerability_group_routes.post(
    "/configuration/{conf_uuid}/vulnerability_groups"
)
def create_vulnerability_groups(
    conf_uuid: UUID,
    vulnerability_groups: List[NewVulnerabilityGroup],
    user = Depends(SecurityUseCase.validate)
):
    """
    Create vulnerability groups by configuration

    :param conf_uuid: Configuration identifier
    :param vulnerability_groups: Vulnerability groups list to insert
    :param user: User authenticated by token.
    """
    try:
        if not vulnerability_groups:
            return UJSONResponse(
                VulnerabilityGroupMessage.not_vulnerability_entered,
                HTTP_400_BAD_REQUEST
            )

        configuration_found = ConfigurationInterface.find_by_identifier(
            conf_uuid,
            user
        )
        if not configuration_found:
            return UJSONResponse(
                ConfigurationMessage.not_found,
                HTTP_404_NOT_FOUND
            )

        vg_found = VulnerabilityGroupInterface.find_by_configuration(
            configuration_found
        )

        if vg_found:
            return UJSONResponse(
                VulnerabilityGroupMessage.exist,
                HTTP_400_BAD_REQUEST
            )

        for vulnerability_group in vulnerability_groups:
            VulnerabilityGroup(
                **vulnerability_group.dict(),
                identifier=uuid1(),
                configuration=configuration_found
            ).save()

    except Exception as error:
        return UJSONResponse(
            str(error),
            HTTP_400_BAD_REQUEST
        )

    return UJSONResponse(
        VulnerabilityGroupMessage.created,
        HTTP_201_CREATED
    )
